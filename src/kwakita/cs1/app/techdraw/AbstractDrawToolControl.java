package kwakita.cs1.app.techdraw;

import java.awt.event.ActionListener;
import java.awt.event.MouseListener;


/**
 * <h2>ツールボタンを実現するソフトウェアアーキテクチャ</h2>
 * 
 * <p>このクラスは描画ツールの機能の一般的な性質を抽象クラスとして実装したものです．
 * 
 * <p>各種の描画ツールは，
 * <ul>
 * <li> ツールバーに表示されるツールボタン
 * <li> ツールボタンをクリックしたあとのユーザインタラクション
 * <li> ユーザインタラクションで指定された図の描画
 * </ul>
 * などから構成されます．
 * 
 * <p>たとえば，線を描くための機能は
 * <ul>
 * <li> ツールバーに配置された「線分」と記されたツールボタン
 * <li> 「線分」ボタンをクリックしたあとに，線分の始点と終点を二回のクリックで指定するインタラクション
 * <li> 始点と終点の間に線分を描く描画機能
 * </ul>
 * から構成されています．
 * 
 * <p>これら三種の機能は，プログラムのなかに混在させると，保守しにくいコードとなることが知られており，それぞれをきれいに分離することが推奨されています．
 * 
 * <p>ここに示す例では，ツールボタンの形状とクリック後のインタラクションをひとつのクラスとして，描画機能を別のクラスとして実現できることを示します．たくさんのツールを作成の一助として， 前者のためには，この抽象クラス (AbstractDrawToolControl) を，後者のためには <code>AbstractDrawToolButton</code>抽象クラスを作成しました．
 * 
 * <h2>AbstractDrawToolControl 抽象クラス</h2>
 * 
 * <p>この抽象クラスが提供する唯一の機能は，ツールボタンがクリックされたときに，その後のユーザインタラクションを変更することです．線分と折れ線を描くことの違いについて考えてみましょう．線分を描くときには，ユーザは始点と終点を指定するために，描画ソフトウェアで二回クリックします．一方，折れ線を描画するときは，ユーザは折れ線に含まれるいくつかの点をクリックします．線分のときは，クリックの回数が二回ですが，折れ線のときはクリックの回数は事前には分りません．そこで，ユーザには始点，二番目の点，三番目の点，・・・，終点とクリックしてもらいますが，終点をクリックしたときに，そこが最後の点であることを知らせてもらうためにダブルクリックしてもらうことにしましょう．
 * 
 * <p>このように，線分の描画と折れ線の描画のインタラクションを比較しても，かなり異なるインタラクションが必要となることがわかります．つまり，描画ツールによってインタラクションは異なります．
 * 
 * <p>このことは，描画ツールをクリックした時点で，インタラクションのやり方を変更しなくてはならないことを意味しています．つまり，線分ツールを使っていくつかの線分を描いたあとで，今度は折れ線ツールをクリックしたとします．この時点で，インタラクションの方法が，線分ツールの方法（二つのクリックを用いた指定）から折れ線ツール（いくつかのクリックに続いてダブルクリック）に変化します．
 * 
 * <p>マウスを用いたユーザインタラクションは MouseListener で実装されますので，描画ツールをクリックした時点でユーザインタラクションを司る MouseListener を更新すればよいわけです．この働きは，すべての描画ツールに共通ですので，<code>AbstractDrawToolControl</code>は，この共通機能を<code>switchTool</code>メソッドを用いて提供しています．
 * 
 * @see AbstractDrawToolButton
 * @author  Ken Wakita
 */
public abstract class AbstractDrawToolControl implements ActionListener {
    void switchTool(MouseListener listener) {
        TDCanvas.control.switchTool(listener);
    }
}
